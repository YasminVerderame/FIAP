# -*- coding: utf-8 -*-
"""Aula_5_Yan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKUmsQMzGmLFbkgfSVTK5ql7vHgFzMgr
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import cv2
from matplotlib import pyplot as plt
import numpy as np

img = cv2.imread('i.png')
plt.imshow(img)

#carrega imagem
img = cv2.imread('i.png')
plt.imshow(img, cmap="gray")
plt.show()

# Define o kernel
kernel = np.array([[1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1],
                   [1, 1, 1, 1 ,1]])

kernel = kernel/(np.sum(kernel) if np.sum(kernel)!=0 else 1)

# Realiza o produto de convolução
imgf = cv2.filter2D(img,-1,kernel)

#exibe resultado filtrado
plt.imshow(imgf, cmap="gray")
plt.show()

#Filtro Laplaciano (realçar bordas em uma imagem)
kernel = np.array([[0, -1, 0],
                   [-1, 4, -1],
                   [0, -1, 0]])

#detecção de bordas
kernel = np.array([[-1, -1, -1],
                   [-1, 8, -1],
                   [-1, -1, -1]])

#filtro de Sobel X (detecção de bordas horizontais)
kernel = np.array([[-1, 0, 1],
                   [-2, 0, 2],
                   [-1, 0, 1]])

#filtro de Sobel Y (detecção de bordas verticais)
kernel = np.array([[-1, -2, -1],
                   [ 0,  0,  0],
                   [ 1,  2,  1]])

#outro exemplo
kernel = np.array([[-1, -2, -1],
                   [ 0, 0, 0],
                   [-1, 0, 1]])

#carrega imagem
img = cv2.imread('i.png')
plt.imshow(img, cmap="gray")
plt.show()



imgf = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)
imgf2 = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)



#exibe resultado filtrado
plt.imshow(imgf, cmap="gray")
plt.show()
plt.imshow(imgf2, cmap="gray")
plt.show()

#carrega imagem
img = cv2.imread('i.png')
plt.imshow(img, cmap="gray")
plt.show()

# Realiza o blur (o tamanho do kernel deve ser um número ímpar), desvio padrão na direção x e y(automatico)
imgf = cv2.blur(img,(23,23),0)

#exibe resultado filtrado
plt.imshow(imgf, cmap="gray")

# carrega imagem
img = cv2.imread('i.png')
plt.imshow(img, cmap="gray")
plt.show()

min_contrast = 50
max_contrast = 200

#filtro Gaussiano para suavizar e reduzir o ruído
imgfb = cv2.GaussianBlur(img,(5,5),0)
#detectar bordas
imgf = cv2.Canny(imgfb, min_contrast, max_contrast )

plt.imshow(imgf, cmap="gray")
plt.show()

# Carrega a imagem em escala de cinza
image = cv2.imread('i.png')
img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.imshow(img, cmap="gray")
plt.show()

# Aplica o método de limiarização de Otsu
lim, th = cv2.threshold(img, 0, 255, cv2.THRESH_OTSU)
plt.imshow(th, cmap="gray")
plt.show()